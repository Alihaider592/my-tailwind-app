{"ast":null,"code":"var _jsxFileName = \"/home/aalik/Documents/GitHub/my-tailwind-app/src/components/ThemeToggle.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ThemeToggle() {\n  _s();\n  const [theme, setTheme] = useState(\"light\");\n\n  // Check localStorage or system preference on first load\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.toggle(\"dark\", savedTheme === \"dark\");\n    }\n  }, []);\n\n  // When theme changes, apply it to <html> and save it\n  useEffect(() => {\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleTheme,\n    className: \"px-4 py-2 rounded bg-gray-200 dark:bg-gray-800 text-black dark:text-white\",\n    children: theme === \"dark\" ? \"Switch to Light ‚òÄÔ∏è\" : \"Switch to Dark üåô\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(ThemeToggle, \"+6C7zX0KFXKdtXxqQH7LMHLz9vo=\");\n_c = ThemeToggle;\nvar _c;\n$RefreshReg$(_c, \"ThemeToggle\");","map":{"version":3,"names":["useEffect","useState","jsxDEV","_jsxDEV","ThemeToggle","_s","theme","setTheme","savedTheme","localStorage","getItem","document","documentElement","classList","toggle","setItem","toggleTheme","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aalik/Documents/GitHub/my-tailwind-app/src/components/ThemeToggle.jsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState(\"light\");\n\n  // Check localStorage or system preference on first load\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\");\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.toggle(\"dark\", savedTheme === \"dark\");\n    }\n  }, []);\n\n  // When theme changes, apply it to <html> and save it\n  useEffect(() => {\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"px-4 py-2 rounded bg-gray-200 dark:bg-gray-800 text-black dark:text-white\"\n    >\n      {theme === \"dark\" ? \"Switch to Light ‚òÄÔ∏è\" : \"Switch to Dark üåô\"}\n    </button>\n  );\n}\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMQ,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdD,QAAQ,CAACC,UAAU,CAAC;MACpBG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,EAAEN,UAAU,KAAK,MAAM,CAAC;IAC1E;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAR,SAAS,CAAC,MAAM;IACdW,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,MAAM,EAAER,KAAK,KAAK,MAAM,CAAC;IACnEG,YAAY,CAACM,OAAO,CAAC,OAAO,EAAET,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,MAAMU,WAAW,GAAGA,CAAA,KAAM;IACxBT,QAAQ,CAACD,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAC;EAChD,CAAC;EAED,oBACEH,OAAA;IACEc,OAAO,EAAED,WAAY;IACrBE,SAAS,EAAC,2EAA2E;IAAAC,QAAA,EAEpFb,KAAK,KAAK,MAAM,GAAG,oBAAoB,GAAG;EAAmB;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEb;AAAClB,EAAA,CA9BuBD,WAAW;AAAAoB,EAAA,GAAXpB,WAAW;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}